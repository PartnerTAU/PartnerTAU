{"ast":null,"code":"import axios from \"axios\";\naxios.defaults.headers.common['Authorization'] = \"Bearer \" + (localStorage.getItem('token') ? localStorage.getItem('token') : \"\");\nexport const CreatePartnerRequest = async (grpcount, reqgrpcount, semester, course) => {\n  let data = {\n    grpcount: Number(grpcount),\n    reqgrpcount: Number(reqgrpcount),\n    course: course,\n    semester: semester\n  };\n\n  if (localStorage.getItem(\"token\")) {\n    return axios.post(\"http://localhost:3001/PartnerRequest\", data).then(function (response) {\n      return response.data;\n    }).catch(function (error) {\n      return error;\n    });\n  } else {\n    return {\n      errormsg: \"not connected\"\n    };\n  }\n};\n_c = CreatePartnerRequest;\nexport const CreateCourseRequest = async (reqcourseid, course, semester) => {\n  let data = {\n    reqcourseid: Number(reqcourseid),\n    course: course,\n    semester: semester\n  };\n\n  if (localStorage.getItem(\"token\")) {\n    return axios.post(\"http://localhost:3001/CourseRequest\", data).then(function (response) {\n      return response.data;\n    }).catch(function (error) {\n      return error;\n    });\n  } else {\n    return {\n      errormsg: \"not connected\"\n    };\n  }\n};\n_c2 = CreateCourseRequest;\nexport const CreateGroupRequest = async (grp, reqgrp, course, semester) => {\n  let data = {\n    grp: grp,\n    reqgrp: reqgrp,\n    course: course,\n    semester: semester\n  };\n\n  if (localStorage.getItem(\"token\")) {\n    return axios.post(\"http://localhost:3001/GroupRequest\", data).then(function (response) {\n      return response.data;\n    }).catch(function (error) {\n      return error;\n    });\n  } else {\n    return {\n      errormsg: \"not connected\"\n    };\n  }\n};\n_c3 = CreateGroupRequest;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CreatePartnerRequest\");\n$RefreshReg$(_c2, \"CreateCourseRequest\");\n$RefreshReg$(_c3, \"CreateGroupRequest\");","map":{"version":3,"sources":["C:/Users/cohav/Desktop/PartnerTAU-1/FrontEnd/src/functions/serverfunction.js"],"names":["axios","defaults","headers","common","localStorage","getItem","CreatePartnerRequest","grpcount","reqgrpcount","semester","course","data","Number","post","then","response","catch","error","errormsg","CreateCourseRequest","reqcourseid","CreateGroupRequest","grp","reqgrp"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,aAAaC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAA+BD,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA/B,GAA+D,EAA5E,CAAjD;AAGA,OAAO,MAAMC,oBAAoB,GAAG,OAAOC,QAAP,EAAiBC,WAAjB,EAA8BC,QAA9B,EAAwCC,MAAxC,KAAmD;AACrF,MAAIC,IAAI,GAAG;AACTJ,IAAAA,QAAQ,EAACK,MAAM,CAACL,QAAD,CADN;AACkBC,IAAAA,WAAW,EAACI,MAAM,CAACJ,WAAD,CADpC;AACmDE,IAAAA,MAAM,EAAEA,MAD3D;AACmED,IAAAA,QAAQ,EAAEA;AAD7E,GAAX;;AAGA,MAAIL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAkC;AAChC,WAAOL,KAAK,CAACa,IAAN,CAAW,sCAAX,EAAmDF,IAAnD,EACNG,IADM,CACD,UAAUC,QAAV,EAAoB;AACtB,aAAOA,QAAQ,CAACJ,IAAhB;AACD,KAHI,EAINK,KAJM,CAIA,UAAUC,KAAV,EAAiB;AAClB,aAAOA,KAAP;AACH,KANI,CAAP;AAOC,GARH,MASM;AACF,WAAO;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAP;AACD;AACJ,CAhBM;KAAMZ,oB;AAkBb,OAAO,MAAMa,mBAAmB,GAAG,OAAOC,WAAP,EAAoBV,MAApB,EAA4BD,QAA5B,KAAyC;AAC1E,MAAIE,IAAI,GAAG;AACTS,IAAAA,WAAW,EAACR,MAAM,CAACQ,WAAD,CADT;AACwBV,IAAAA,MAAM,EAAEA,MADhC;AACwCD,IAAAA,QAAQ,EAAEA;AADlD,GAAX;;AAGA,MAAIL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAkC;AAChC,WAAOL,KAAK,CAACa,IAAN,CAAW,qCAAX,EAAkDF,IAAlD,EACNG,IADM,CACD,UAAUC,QAAV,EAAoB;AACtB,aAAOA,QAAQ,CAACJ,IAAhB;AACD,KAHI,EAINK,KAJM,CAIA,UAAUC,KAAV,EAAiB;AAClB,aAAOA,KAAP;AACH,KANI,CAAP;AAOD,GARD,MASI;AACF,WAAO;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAP;AACD;AACF,CAhBM;MAAMC,mB;AAkBb,OAAO,MAAME,kBAAkB,GAAG,OAAOC,GAAP,EAAYC,MAAZ,EAAoBb,MAApB,EAA4BD,QAA5B,KAAyC;AACzE,MAAIE,IAAI,GAAG;AACTW,IAAAA,GAAG,EAACA,GADK;AACAC,IAAAA,MAAM,EAACA,MADP;AACeb,IAAAA,MAAM,EAAEA,MADvB;AAC+BD,IAAAA,QAAQ,EAAEA;AADzC,GAAX;;AAGA,MAAIL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAkC;AAChC,WAAOL,KAAK,CAACa,IAAN,CAAW,oCAAX,EAAiDF,IAAjD,EACNG,IADM,CACD,UAAUC,QAAV,EAAoB;AACtB,aAAOA,QAAQ,CAACJ,IAAhB;AACD,KAHI,EAINK,KAJM,CAIA,UAAUC,KAAV,EAAiB;AAClB,aAAOA,KAAP;AACH,KANI,CAAP;AAOD,GARD,MASI;AACF,WAAO;AAACC,MAAAA,QAAQ,EAAE;AAAX,KAAP;AACD;AACF,CAhBM;MAAMG,kB","sourcesContent":["import axios from \"axios\"\r\n\r\naxios.defaults.headers.common['Authorization'] = \"Bearer \" + (localStorage.getItem('token') ?localStorage.getItem('token') : \"\" );\r\n \r\n\r\nexport const CreatePartnerRequest = async (grpcount, reqgrpcount, semester, course) => {\r\n  let data = {\r\n    grpcount:Number(grpcount), reqgrpcount:Number(reqgrpcount), course: course, semester: semester\r\n  }\r\n  if (localStorage.getItem(\"token\")){\r\n    return axios.post(\"http://localhost:3001/PartnerRequest\", data)    \r\n    .then(function (response) {\r\n        return response.data\r\n      })\r\n    .catch(function (error) {\r\n          return error\r\n      })\r\n    }\r\n    else{\r\n      return {errormsg: \"not connected\"}\r\n    }\r\n} \r\n\r\nexport const CreateCourseRequest = async (reqcourseid, course, semester) => {\r\n  let data = {\r\n    reqcourseid:Number(reqcourseid), course: course, semester: semester\r\n  }\r\n  if (localStorage.getItem(\"token\")){\r\n    return axios.post(\"http://localhost:3001/CourseRequest\", data)    \r\n    .then(function (response) {\r\n        return response.data\r\n      })\r\n    .catch(function (error) {\r\n          return error\r\n      })\r\n  }\r\n  else{\r\n    return {errormsg: \"not connected\"}\r\n  }\r\n} \r\n\r\nexport const CreateGroupRequest = async (grp, reqgrp, course, semester) => {\r\n  let data = {\r\n    grp:grp, reqgrp:reqgrp, course: course, semester: semester\r\n  }\r\n  if (localStorage.getItem(\"token\")){\r\n    return axios.post(\"http://localhost:3001/GroupRequest\", data)    \r\n    .then(function (response) {\r\n        return response.data\r\n      })\r\n    .catch(function (error) {\r\n          return error\r\n      })\r\n  }\r\n  else{\r\n    return {errormsg: \"not connected\"}\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}